1.Write a program to take value V and  we want to make change for V Rs, and we have infinite supply of each of the denominations in Indian currency, i.e., we have infinite supply of { 1, 2, 5, 10, 20, 50, 100, 500, 1000} valued coins/notes, what is the minimum number of coins and/or notes needed to make the change.

Input Format:

Take an integer from stdin.

Output Format:

print the integer which is change of the  number.

Example Input :

64

Output:

4

Explanaton:

We need a 50 Rs note and a 10 Rs note and two 2 rupee coins.

PROGRAM:
#include <stdio.h>

int main()
{
    int n,c=0;
    scanf("%d",&n);
    int v[9]={ 1, 2, 5, 10, 20, 50, 100, 500, 1000};
    for ( int i=8;i>=0;i--)
    {
        if(n>=v[i])
        {
            n-=v[i];
            c++;
        }
    }
    printf("%d",c);
    
}


/*
#include<stdio.h>
int main(){
    int a,total=0;
    scanf("%d",&a);
    int denom[9]={1000,500,100,50,20,10,5,2,1};
    //denom[9]={1,2,5,10,20,50,100,500,1000};
    for(int i=0;i<9;i++){
        if(a>denom[i]){
            total+=a/denom[i]; //a/denom[i] gives how many notes of that money
            a=a - a/denom[i] *denom[i]; //that much amount is deducted from the total amount
        }
    }
   
    printf("%d\n",total);
}


int main()
{
    int v,c=0;
    scanf("%d",&v);
    while (v>0)
    {
        if(v-1000>=0)
        {
            v=v-1000;
            c++;
        }
        else if(v-500>=0)
        {
            v=v-500;
            c++;

        }
        else if(v-100>=0)
        {
            v=v-100;
            c++;
        }
        else if(v-50>=0)
        {
            v=v-50;
            c++;
        }
        else if(v-20>=0)
        {
            v=v-20;
            c++;
        }
        else if(v-10>=0)
        {
            v=v-10;
            c++;
        }
        else if(v-5>=0)
        {
            v=v-5;
            c++;
        }
        else if(v-2>=0)
        {
            v=v-2;
            c++;
        }
        else if(v-1>=0)
        {
            v=v-1;
            c++;
        }
            
    }
    printf("%d",c);
}

int main()
{
    int v,c=0;
    scanf("%d",&v);
    while(v>0)
    {
        v=v/2;
        c++;
    }
    printf("%d",c-1);
}
*/


2.Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.

Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.

Example 1:

Input: 

3

1 2 3

2

1 1

Output: 

1

Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 

And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.

You need to output 1.

Constraints:

1 <= g.length <= 3 * 10^4

0 <= s.length <= 3 * 10^4

1 <= g[i], s[j] <= 2^31 - 1

PROGRAM:
#include<stdio.h>

int main()
{
    int n,m,y,r=0;
    scanf("%d",&n);
    int ch[n];
    for(int i = 0; i<n; i++)
    {
        scanf("%d",&ch[i]);

    }
    
    scanf("%d",&m);
    int ck[m];
    for(int i=0; i<m; i++)
    {
        scanf("%d",&ck[i]);
    }
    
    for(int i=0;i<m;i++)
    {
        y = ck[i];
        for(int j = 0; j<n; j++)
        {
            if(ch[j] >= y) 
                r++;
            ch[j] = -1;
        }
    }
    printf("%d",r);
}

/*#include <stdio.h>

int main()
{
    int n,c=0;
    scanf("%d",&n);
    int g[n];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&g[i]);
    }
    int m;
    scanf("%d",&m);
    int ck[m];
    for(int i=0;i<m;i++)
    {
        scanf("%d",&ck[i]);
    }
    for (int i=0;i<n;i++)
    {
        for (int j=0;j<m;j++)
        {
            if (ck[j]>=g[i])
            {
                c++;
                //ck[j]=-1;
                g[i]=0;
            }
        }
    }
    printf("%d",c);
    
}*/


3.A person needs to eat burgers. Each burger contains a count of calorie. After eating the burger, the person needs to run a distance to burn out his calories. 
 If he has eaten i burgers with c calories each, then he has to run at least 3i * c  kilometers to burn out the calories. For  example, if he ate 3
 burgers with the count of calorie in the order: [1, 3, 2], the kilometers he needs to run are (30 * 1) + (31 * 3) + (32 * 2) = 1 + 9 + 18 = 28.
 But this is not the minimum, so need to try out other orders of consumption and choose the minimum value. Determine the minimum distance
 he needs to run. Note: He can eat burger in any order and use an efficient sorting algorithm.Apply greedy approach to solve the problem.
Input Format
First Line contains the number of burgers
Second line contains calories of each burger which is n space-separate integers 
 
Output Format
 
Print: Minimum number of kilometers needed to run to burn out the calories
 
Sample Input
 
3
5 10 7
 
Sample Output
76

PROGRAM:
#include <stdio.h>
#include <math.h>

void swap(int *a, int *b) 
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high)
{
    int pivot = arr[high]; 
    int i = (low - 1);
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] > pivot) //'>' for descending order
        { 
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
    if (low < high) {
        int pi = partition(arr, low, high); 
        quickSort(arr, low, pi - 1); 
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int n;
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &arr[i]);
    }

    quickSort(arr, 0, n - 1);

    int s = 0;
    for (int i = 0; i < n; i++)
    {
        s += pow(n, i) * arr[i];
    }

    printf("%d", s);
    return 0;
}
/*
SELECTION SORT:
void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int min_idX = i;

        for (int j = i + 1; j < n; j++) {
            if (arr[j] > arr[min_idx]) {
                min_idx = j;
            }
        }
        int temp = arr[min_idx];
        arr[min_idx] = arr[i];
        arr[i] = temp;
    }
}
int main(){
    
    selectionSort(arr,n);
    
}*/


4.Given an array of N integer, we have to maximize the sum of arr[i] * i, where i is the index of the element (i = 0, 1, 2, ..., N).Write an algorithm based on Greedy technique with a Complexity O(nlogn).

 Input Format:

First line specifies the number of elements-n

The next n lines contain the array elements.

Output Format:

Maximum Array Sum to be printed.

Sample Input:

5

2 5 3 4 0

Sample output:

40

PROGRAM:
#include <stdio.h>

void swap(int *a, int *b) 
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) 
{
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] < pivot)
        {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
    if (low < high) 
    {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() 
{
    int n,sum=0;
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &arr[i]);
    }

    quickSort(arr, 0, n - 1);

    for(int i=0;i<n;i++)
    {
        sum+=(arr[i]*i);
    }
    
    printf("%d",sum);

    return 0;
}


5.Given two arrays array_One[] and array_Two[] of same size N.
We need to first rearrange the arrays such that the sum of the product of pairs( 1 element from each) is minimum. That is SUM (A[i] * B[i]) for all i is minimum.
3
1           28
2
3
4
5
6

PROGRAM:
#include <stdio.h>

void swap(int *a, int *b) 
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) 
{
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] < pivot)
        {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
    if (low < high) 
    {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() 
{
    int n,sum=0;
    scanf("%d", &n);
    int arr[n],brr[n];
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &arr[i]);
    }
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &brr[i]);
    }
    quickSort(arr, 0, n - 1);
    quickSort(brr, 0, n - 1);
    
    for (int i = 0; i < n / 2; i++) 
    {
        swap(&brr[i], &brr[n - i - 1]);
    }
    
    for(int i=0;i<n;i++)
    {
        sum+=(arr[i]*brr[i]);
    }
    
    
    printf("%d",sum);

    return 0;
}

