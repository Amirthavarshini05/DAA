1.Problem Statement
Given an array of 1s and 0s this has all 1s first followed by all 0s. Aim is to find the number of 0s. Write a program using Divide and Conquer to Count the number of zeroes in the given array.
Input Format
   First Line Contains Integer m – Size of array
   Next m lines Contains m numbers – Elements of an array
Output Format
   First Line Contains Integer – Number of zeroes present in the given array.

PROGRAM:
#include <stdio.h>

int findFirstZero(int arr[], int low, int high) {
    if (high >= low) {
        int mid = low + (high - low) / 2;

        if ((mid == 0 || arr[mid - 1] == 1) && arr[mid] == 0) {
            return mid;
        }

        if (arr[mid] == 1) {
            return findFirstZero(arr, mid + 1, high);
        } else {
            return findFirstZero(arr, low, mid - 1);
        }
    }
    return -1;
}

int countZeros(int arr[], int size) {
    int firstZeroIndex = findFirstZero(arr, 0, size - 1);

    if (firstZeroIndex == -1) {
        return 0;
    }

    return size - firstZeroIndex;
}

int main() {
    int m;
    scanf("%d", &m);

    int arr[m];
    for (int i = 0; i < m; i++) {
        scanf("%d", &arr[i]);
    }

    int result = countZeros(arr, m);
    printf("%d", result);

    return 0;
}


2.Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-231 <= nums[i] <= 231 - 1

PROGRAM:
#include <stdio.h>

int majorityElement(int nums[], int numsSize) {
    int count = 0, candidate = 0;

    for (int i = 0; i < numsSize; i++) {
        if (count == 0) {
            candidate = nums[i];
        }
        count += (nums[i] == candidate) ? 1 : -1;
    }

    return candidate;
}

int main() {
    int n;
    scanf("%d", &n);

    int nums[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &nums[i]);
    }

    int result = majorityElement(nums, n);
    printf("%d\n", result);

    return 0;
}


3.Problem Statement:
Given a sorted array and a value x, the floor of x is the largest element in array smaller than or equal to x. Write divide and conquer algorithm to find floor of x.
Input Format
   First Line Contains Integer n – Size of array
   Next n lines Contains n numbers – Elements of an array
   Last Line Contains Integer x – Value for x
 
Output Format
   First Line Contains Integer – Floor value for x

PROGRAM:
#include <stdio.h>

int findFloor(int arr[], int low, int high, int x) 
{
    if (x < arr[low])
        return -1;  
    
    if (x >= arr[high])
        return arr[high];  

    int mid;
    while (low <= high) 
    {
        mid = (low + high) / 2;

        if (arr[mid] == x)
            return arr[mid];

        if (arr[mid] < x)
        {
            if (mid + 1 <= high && arr[mid + 1] > x)
                return arr[mid];  
            low = mid + 1;
        }
        else 
        {
            high = mid - 1;
        }
    }

    return arr[high];
}

int main() {
    int n, x;
    scanf("%d", &n);
    int arr[n];

    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }

    scanf("%d", &x);

    int floorValue = findFloor(arr, 0, n - 1, x);
    if (floorValue == -1)
        printf("%d",x);
    else
        printf("%d",floorValue);

    return 0;
}


4.Problem Statement:
Given a sorted array of integers say arr[] and a number x. Write a recursive program using divide and conquer strategy to check if there exist two elements in the array whose sum = x. If there exist such two elements then return the numbers, otherwise print as “No”.
Note: Write a Divide and Conquer Solution
Input Format
   First Line Contains Integer n – Size of array
   Next n lines Contains n numbers – Elements of an array
   Last Line Contains Integer x – Sum Value
Output Format
   First Line Contains Integer – Element1
   Second Line Contains Integer – Element2 (Element 1 and Elements 2 together sums to value “x”)

PROGRAM:
#include <stdio.h>


int findPair(int arr[], int low, int high, int x, int *num1, int *num2) {

    if (low >= high) {
        return 0;
    }

    int sum = arr[low] + arr[high];

    if (sum == x) {
        *num1 = arr[low];
        *num2 = arr[high];
        return 1;
    }
    else if (sum < x) {
        return findPair(arr, low + 1, high, x, num1, num2);
    } else {
        return findPair(arr, low, high - 1, x, num1, num2);
    }
}

int main() {
    int n, x;


    scanf("%d", &n);

    int arr[n];

 
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }


    scanf("%d", &x);

    int num1 = 0, num2 = 0;

 
    if (findPair(arr, 0, n - 1, x, &num1, &num2)) {
        printf("%d\n%d\n", num1, num2);
    } else {
        printf("No\n");
    }

    return 0;
}


5.Write a Program to Implement the Quick Sort Algorithm

Input Format:
The first line contains the no of elements in the list-n
The next n lines contain the elements.

Output:
Sorted list of elements

PROGRAM:
#include <stdio.h>


void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}


int partition(int arr[], int low, int high) {
    int pivot = arr[high];  
    int i = low - 1;      

    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return i + 1;
}


void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);  

        quickSort(arr, low, pi - 1);  
        quickSort(arr, pi + 1, high);  
    }
}

int main() {
    int n;


    scanf("%d", &n);

    int arr[n];

 
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }


    quickSort(arr, 0, n - 1);


    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}

